#!/usr/bin/env python
import matplotlib as mpl
mpl.use('GTKCairo')
import rospy, tf, rosbag
import tf2_py
import numpy as np
import matplotlib.pyplot as plt
from copy import deepcopy
from geometry_msgs.msg import Pose, Quaternion
from std_msgs.msg import Float64MultiArray

# mass_matrix = np.zeros(shape=(6, 6))
got_mass_matrix = False
damping_matrix = np.zeros(shape=(6, 6))
motors_transient_dynamics = np.zeros(shape=(4, 1))
tau = np.zeros(shape=(6, 1))
coriolis_matrix = np.zeros(shape=(6, 6))
c_v = np.zeros(shape=(6, 1))
gravity = np.zeros(shape=(6, 1))
v_dot = np.zeros(shape=(6, 1))
v = np.zeros(shape=(6, 1))
p_q = np.zeros(shape=(7, 1))
p = np.zeros(shape=(6, 1))
bag = rosbag.Bag('/tmp/dyn_test.bag')
mA_draw = np.zeros(shape=(1, 1))
mAh_consumed = np.zeros(shape=(1, 1))
Vnom = np.zeros(shape=(1, 1))
secs = np.zeros(shape=(1, 1))

for topic, msg, t in bag.read_messages(topics='dynamics param'):
    if got_mass_matrix is False:
        # mass_matrix = np.array(msg.mass_matrix).reshape(6, 6)
        got_mass_matrix = True
    secs = np.append(secs, msg.time_secs)
    damping_matrix = np.dstack((damping_matrix, np.array(msg.damping_matrix).reshape(6, 6)))
    motors_transient_dynamics = np.column_stack((motors_transient_dynamics, np.array(msg.motors_transient_dynamics).reshape(4, 1)))
    tau = np.column_stack((tau, np.array(msg.tau).reshape(6, 1)))
    coriolis_matrix = np.dstack((coriolis_matrix, np.array(msg.coriolis_matrix).reshape(6, 6)))
    gravity = np.column_stack((gravity, np.array(msg.gravity).reshape(6, 1)))
    c_v = np.column_stack((c_v, np.array(msg.c_v).reshape(6, 1)))
    v_dot = np.column_stack((v_dot, np.array(msg.v_dot).reshape(6, 1)))
    v = np.column_stack((v, np.array(msg.v).reshape(6, 1)))
    p_q = np.column_stack((p_q, np.array(msg.p_q).reshape(7, 1)))
    p = np.column_stack((p, np.array(msg.p).reshape(6, 1)))
    mA_draw = np.append(mA_draw, msg.mA_draw)
    mAh_consumed = np.append(mAh_consumed, msg.mAh_consumed)
    Vnom = np.append(Vnom, msg.Vnom)

bag.close()

## BLOTTINGGG
length_k = len(secs)
length_t = 10
plot_thruster_dynamics = False
plot_gravity_vector = False
plot_dynamics_v_p = True
plot_damping_coriolis = True
plot_battery_dynamics = True
if plot_thruster_dynamics is True:
    # Figure 1 Thruster Input, Thrusters Dynamics and Tau
    # TODO: get Thrusters Input from input test file
    fig1 = plt.figure(num=None, figsize=(30, 15), dpi=80, facecolor='w', edgecolor='k', tight_layout =True)

    plt.subplot(211)
    plt.plot(secs, motors_transient_dynamics[0, :], label="M1")
    plt.plot(secs, motors_transient_dynamics[1, :], label="M2")
    plt.plot(secs, motors_transient_dynamics[2, :], label="M3")
    plt.plot(secs, motors_transient_dynamics[3, :], label="M4")
    plt.xlabel("Time (s)")
    plt.ylabel("rad/s")
    plt.title('Thrusters Dynamics')
    plt.xlim(0, length_t)
    plt.legend()

    plt.subplot(212)
    plt.plot(secs, tau[0, :], label="Thrust/Surge")
    plt.plot(secs, tau[1, :], label="Sway")
    plt.plot(secs, tau[2, :], label="Heave")
    plt.plot(secs, tau[3, :], label="Roll Torque")
    plt.plot(secs, tau[4, :], label="Pitch Torque")
    plt.plot(secs, tau[5, :], label="Yaw Torque")
    plt.title('Tau')
    plt.xlabel("Time (s)")
    plt.ylabel("Newton")
    plt.xlim(0, length_t)
    plt.legend()

if plot_gravity_vector is True:
    # Figure 2 Tau, Pose P, Gravity Vector
    fig2 = plt.figure(num=None, figsize=(30, 15), dpi=80, facecolor='w', edgecolor='k', tight_layout =True)

    plt.subplot(311)
    plt.plot(secs, tau[0, :], label="Thrust/Surge")
    plt.plot(secs, tau[3, :], label="Roll Torque")
    plt.plot(secs, tau[4, :], label="Pitch Torque")
    plt.plot(secs, tau[5, :], label="Yaw Torque")
    plt.title('Tau')
    plt.xlabel("Time (s)")
    plt.ylabel("Newton")
    plt.xlim(0, length_t)
    plt.legend()

    plt.subplot(323)
    plt.plot(secs, p[0, :], label="x")
    plt.plot(secs, p[1, :], label="y")
    plt.plot(secs, p[2, :], label="z")
    plt.title('Position')
    plt.xlabel("Time (s)")
    plt.ylabel("Meters")
    plt.xlim(0, length_t)
    plt.legend()

    plt.subplot(324)
    plt.plot(secs, p[3, :], label="Roll")
    plt.plot(secs, p[4, :], label="Pitch")
    plt.plot(secs, p[5, :], label="Yaw")
    plt.title('Orientation')
    plt.xlabel("Time (s)")
    plt.ylabel("Angle")
    plt.xlim(0, length_t)
    plt.legend()

    plt.subplot(313)
    plt.plot(secs, gravity[0, :], label="Thrust/Surge")
    plt.plot(secs, gravity[1, :], label="Sway")
    plt.plot(secs, gravity[2, :], label="Heave")
    plt.plot(secs, gravity[3, :], label="Roll")
    plt.plot(secs, gravity[4, :], label="Pitch")
    plt.plot(secs, gravity[5, :], label="Yaw")
    plt.title('Gravity Vector')
    plt.xlabel("Time (s)")
    plt.ylabel("Newton")
    plt.xlim(0, length_t)
    plt.legend()

if plot_dynamics_v_p is True:
    # Figure 3 Tau, vdot, v, pdot, p
    fig3 = plt.figure(num=None, figsize=(30, 15), dpi=80, facecolor='w', edgecolor='k', tight_layout =True)

    plt.subplot(511)
    plt.plot(secs, tau[0, :], label="Thrust/Surge")
    plt.plot(secs, tau[3, :], label="Roll Torque")
    plt.plot(secs, tau[4, :], label="Pitch Torque")
    plt.plot(secs, tau[5, :], label="Yaw Torque")
    plt.title('Tau')
    plt.xlabel("Time (s)")
    plt.ylabel("Newton | Newton.m")
    plt.legend()

    plt.subplot(524)
    plt.plot(secs, p_q[3, :], label="qi")
    plt.plot(secs, p_q[4, :], label="qj")
    plt.plot(secs, p_q[5, :], label="qj")
    plt.plot(secs, p_q[6, :], label="qk")
    plt.title('Quaternion')
    plt.xlabel("Time (s)")
    plt.ylabel("_")
    plt.xlim(0, length_t)
    plt.legend()

    # plt.subplot(524)
    # plt.plot(secs, p_dot[3, :], label="Roll_dot")
    # plt.plot(secs, p_dot[4, :], label="Pitch_dot")
    # plt.plot(secs, p_dot[5, :], label="Yaw_dot")
    # plt.title('Orientation_dot')
    # plt.xlabel("Time (s)")
    # plt.ylabel("dAngle/dt")
    # plt.xlim(0, length_t)
    # plt.legend()
    # plt.subplot(524)
    # plt.plot(secs, p_dot[3, :], label="qr")
    # plt.plot(secs, p_dot[4, :], label="qi")
    # plt.plot(secs, p_dot[5, :], label="qj")
    # plt.plot(secs, p_dot[6, :], label="qk")
    # plt.title('Orientation_dot')
    # plt.xlabel("Time (s)")
    # plt.ylabel("dAngle/dt")
    # plt.xlim(0, length_t)
    # plt.legend()

    plt.subplot(525)
    plt.plot(secs, p[0, :], label="x")
    plt.plot(secs, p[1, :], label="y")
    plt.plot(secs, p[2, :], label="z")
    plt.title('Position')
    plt.xlabel("Time (s)")
    plt.ylabel("Meters")
    plt.xlim(0, length_t)
    plt.legend()

    plt.subplot(526)
    plt.plot(secs, p[3, :], label="Roll")
    plt.plot(secs, p[4, :], label="Pitch")
    plt.plot(secs, p[5, :], label="Yaw")
    plt.title('Orientation')
    plt.xlabel("Time (s)")
    plt.ylabel("Angle")
    plt.xlim(0, length_t)
    plt.legend()

    plt.subplot(527)
    plt.plot(secs, v_dot[0, :], label="x_dot_dot")
    plt.plot(secs, v_dot[1, :], label="y_dot_dot")
    plt.plot(secs, v_dot[2, :], label="z_dot_dot")
    plt.title('Velocity_dot')
    plt.xlabel("Time (s)")
    plt.ylabel("d(Meter/s)/dt")
    plt.xlim(0, length_t)
    plt.legend()

    plt.subplot(528)
    plt.plot(secs, v_dot[3, :], label="Roll_dot_dot")
    plt.plot(secs, v_dot[4, :], label="Pitch_dot_dot")
    plt.plot(secs, v_dot[5, :], label="Yaw_dot_dot")
    plt.title('Angular_Velocity_dot')
    plt.xlabel("Time (s)")
    plt.ylabel("d(Angle/s)/dt")
    plt.xlim(0, length_t)
    plt.legend()

    plt.subplot(529)
    plt.plot(secs, v[0, :], label="x_dot")
    plt.plot(secs, v[1, :], label="y_dot")
    plt.plot(secs, v[2, :], label="z_dot")
    plt.title('Velocity')
    plt.xlabel("Time (s)")
    plt.ylabel("Meter/s")
    plt.xlim(0, length_t)
    plt.legend()

    plt.subplot(5, 2, 10)
    plt.plot(secs, v[3, :], label="Roll_dot")
    plt.plot(secs, v[4, :], label="Pitch_dot")
    plt.plot(secs, v[5, :], label="Yaw_dot")
    plt.title('Angular_Velocity')
    plt.xlabel("Time (s)")
    plt.ylabel("Angle/s")
    plt.xlim(0, length_t)
    plt.legend()

if plot_damping_coriolis is True:
    # Figure 4 Damping, Coriolis, v, tau - gravity
    fig4 = plt.figure(num=None, figsize=(30, 15), dpi=80, facecolor='w', edgecolor='k', tight_layout =True)

    plt.subplot(611)
    plt.plot(secs, tau[0, :] - gravity[0, :], label="Thrust/Surge")
    plt.plot(secs, -gravity[1, :], label="Sway")
    plt.plot(secs, -gravity[2, :], label="Heave")
    plt.plot(secs, tau[3, :] - gravity[3, :], label="Roll")
    plt.plot(secs, tau[4, :] - gravity[4, :], label="Pitch")
    plt.plot(secs, tau[5, :] - gravity[5, :], label="Yaw")
    plt.title('Tau - Gravity Vector')
    plt.xlabel("Time (s)")
    plt.ylabel("Newton")
    plt.xlim(0, length_t)
    plt.legend()
    plt.grid()

    plt.subplot(612)
    plt.plot(secs, coriolis_matrix[0, 0, :], label="C11")
    plt.plot(secs, coriolis_matrix[1, 1, :], label="C22")
    plt.plot(secs, coriolis_matrix[2, 2, :], label="C33")
    plt.plot(secs, coriolis_matrix[3, 3, :], label="C44")
    plt.plot(secs, coriolis_matrix[4, 4, :], label="C55")
    plt.plot(secs, coriolis_matrix[5, 5, :], label="C66")
    plt.title('Coriolis')
    plt.xlabel("Time (s)")
    plt.ylabel("?")
    plt.xlim(0, length_t)
    plt.legend()
    plt.grid()

    plt.subplot(613)
    plt.plot(secs, damping_matrix[0, 0, :], label="X")
    plt.plot(secs, damping_matrix[1, 1, :], label="Y")
    plt.plot(secs, damping_matrix[2, 2, :], label="Z")
    plt.plot(secs, damping_matrix[3, 3, :], label="Kp")
    plt.plot(secs, damping_matrix[4, 4, :], label="Mq")
    plt.plot(secs, damping_matrix[5, 5, :], label="Nr")
    plt.xlim(0, length_t)
    plt.title('Damping')
    plt.xlabel("Time (s)")
    plt.ylabel("N/(m/s)")
    plt.legend()
    plt.grid()

    plt.subplot(614)
    plt.plot(secs, c_v[0, :], label="x")
    plt.plot(secs, c_v[1, :], label="y")
    plt.plot(secs, c_v[2, :], label="z")
    plt.plot(secs, c_v[3, :], label="p")
    plt.plot(secs, c_v[4, :], label="q")
    plt.plot(secs, c_v[5, :], label="r")
    plt.xlim(0, length_t)
    plt.title('C_V')
    plt.xlabel("Time (s)")
    plt.ylabel("Newton")
    plt.legend()
    plt.grid()

    plt.subplot(615)
    plt.plot(secs, v[0, :], label="x_dot")
    plt.plot(secs, v[1, :], label="y_dot")
    plt.plot(secs, v[2, :], label="z_dot")
    plt.title('Velocity')
    plt.xlabel("Time (s)")
    plt.ylabel("Meter/s")
    plt.legend()
    plt.xlim(0, length_t)
    plt.grid()

    plt.subplot(616)
    plt.plot(secs, v[3, :], label="Roll_dot")
    plt.plot(secs, v[4, :], label="Pitch_dot")
    plt.plot(secs, v[5, :], label="Yaw_dot")
    plt.title('Angular_Velocity')
    plt.xlabel("Time (s)")
    plt.ylabel("Angle/s")
    plt.legend()
    plt.xlim(0, length_t)
    plt.grid()

if plot_battery_dynamics is True:
    # Figure 5 Battery Voltage, Current Draw and Consumption
    fig4, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(30, 15), dpi=80, facecolor='w', edgecolor='k', tight_layout =True)
    # mA_draw = np.append(mA_draw, msg.mA_draw)
    # mAh_consumed = np.append(mAh_consumed, msg.mAh_consumed)
    # Vnom = np.append(Vnom, msg.Vnom)

    ax1.plot(secs, mA_draw, label="Current Draw")
    ax1t = ax1.twinx()
    ax1t.plot(secs, mAh_consumed, label="Capacity Drawn", c='.5')
    ax1.set_title('Current Draw and Capacity Drawn')
    ax1.set_xlabel("Time (s)")
    ax1.set_ylabel("mA")
    ax1t.set_ylabel("mAh")
    ax1.set_xlim(0, length_t)
    ax1.legend()
    ax1t.legend(loc=4)
    ax1.grid()

    ax2.plot(secs, Vnom, label="Effective Nominal Voltage")
    ax2.set_title('Instantaneous Effective Nominal Voltage')
    ax2.set_xlabel("Time (s)")
    ax2.set_ylabel("V")
    ax2.set_xlim(0, length_t)
    ax2.legend()
    ax2.grid()
    # Translation
    normP = np.zeros(shape=length_k)
    print(p[0:3, 0])
    for k in np.arange(1, length_k):
        normP[k] = np.linalg.norm(p[0:3, k]-p[0:3, 1])
    print(len(normP))
    print(len(secs))
    ax3.plot(secs, normP, label="Travel")
    ax3.set_title('Travel Distance from Origin')
    ax3.set_xlabel("Time (s)")
    ax3.set_ylabel("m")
    ax3.set_xlim(0, length_t)
    ax3.legend()
    ax3.grid()

plt.show()